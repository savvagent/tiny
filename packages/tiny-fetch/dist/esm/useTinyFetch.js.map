{
  "version": 3,
  "sources": ["../../src/utils.js", "../../src/TinyFetch.js", "../../src/interceptors/json-request.js", "../../src/interceptors/json-response.js", "../../src/interceptors/reject-errors.js", "../../src/interceptors/lrucache.js", "../../src/useTinyFetch.js"],
  "sourcesContent": ["export const isJson = (str) => {\n  try {\n    if (JSON.parse(str)) return true\n  } catch (e) {\n    return false\n  }\n}\n\nexport const isObject = (thing) => typeof thing === 'object'\n\nexport const isString = (thing) => typeof thing === 'string'\n\nexport function isEmpty(value) {\n  let empty = false\n  if (value === null || value === undefined) empty = true\n  else if (typeof value === 'string' && value === '') empty = true\n  else if (value instanceof Date) empty = false\n  else if ((Array.isArray(value) || typeof value === 'string') && value.length < 1) empty = true\n  else if (typeof value === 'string' && !/\\S/.test(value)) empty = true\n  else if (typeof value === 'object' && Object.keys(value).length < 1) empty = true\n  else if (typeof value === 'number' && value === 0) empty = true\n  return empty\n}\n\nexport function isNotEmpty(value) {\n  return !isEmpty(value)\n}\n\nexport const toRequest = (request) => (request instanceof Request ? request : new Request(request))\n\nexport const overloadMethod = (method, request) => {\n  const { url } = request\n  return new Request(url, { ...request, method })\n}\n\n", "import { isJson, overloadMethod, toRequest } from './utils'\n\nclass TinyFetch {\n  constructor(interceptors = [], _fetch) {\n    const f =\n      typeof fetch === 'function' && typeof window !== 'undefined'\n        ? fetch.bind(window)\n        : typeof globalThis !== 'undefined'\n        ? fetch.bind(globalThis)\n        : _fetch\n    this.cache = new Map()\n    this.interceptors = [...interceptors]\n    this.requestPromise = null\n    this.requestMap = new Map()\n    this.fetch = f\n  }\n\n  clear() {\n    this.interceptors = []\n  }\n\n  interceptor(req) {\n    // console.log(`req`, req)\n    let promise = Promise.resolve(req)\n\n    this.interceptors.forEach(({ request, requestError }) => {\n      if (request || requestError) {\n        promise = promise.then((arg) => {\n          return request(arg)\n        }, requestError)\n      }\n    })\n\n    promise = promise.then((a) => {\n      // console.log(`a`, a)\n      // console.log(`promise::a.headers.get('content-type')`, a.headers.get('content-type'))\n      return this.fetch(a)\n    })\n\n    this.interceptors.forEach(({ response, responseError }) => {\n      if (response || responseError) {\n        promise = promise.then(response, responseError)\n      }\n    })\n\n    return promise\n  }\n\n  register(_interceptor, pos) {\n    if (Array.isArray(_interceptor)) this.interceptors = [...this.interceptors, ..._interceptor]\n    else {\n      const existing = Boolean(this.interceptors.find((i) => i.id === _interceptor.id))\n      if (pos !== 'undefined' && !existing) {\n        this.interceptors.splice(pos, 0, _interceptor)\n      } else if (!existing) this.interceptors = [...this.interceptors, _interceptor]\n    }\n  }\n\n  request(request) {\n    const req = toRequest(request)\n    const s = JSON.stringify({\n      url: req.url,\n      method: req.method,\n      ...(req.body && isJson(req.body) && { body: JSON.stringify(req.body) }),\n    })\n    if (this.cache.has(s)) return this.cache.get(s)\n    this.cache.set(\n      s,\n      this.interceptor(req).finally(() => this.cache.delete(s))\n    )\n    return this.cache.get(s)\n  }\n\n  delete(request) {\n    const req = toRequest(request)\n    const r = overloadMethod('DELETE', req)\n    return this.request(r)\n  }\n\n  get(request) {\n    const req = toRequest(request)\n    const r = overloadMethod('GET', req)\n    return this.request(r)\n  }\n\n  head(request) {\n    const req = toRequest(request)\n    const r = overloadMethod('HEAD', req)\n    return this.request(r)\n  }\n\n  patch(request) {\n    const req = toRequest(request)\n    const r = overloadMethod('PATCH', req)\n    return this.request(r)\n  }\n\n  post(request) {\n    const req = toRequest(request)\n    const r = overloadMethod('POST', req)\n    return this.request(r)\n  }\n\n  put(request) {\n    const req = toRequest(request)\n    const r = overloadMethod('PUT', req)\n    return this.request(r)\n  }\n\n  unregister(interceptorId) {\n    this.interceptors = this.interceptors.filter((i) => i.id !== interceptorId)\n  }\n\n  get interceptors() {\n    return this._interceptors\n  }\n\n  set interceptors(val) {\n    this._interceptors = val\n  }\n}\n\nexport default TinyFetch\n", "import { isJson, isNotEmpty } from '../utils'\n\nconst jsonRequest = {\n  request(req) {\n    req.headers.set('Content-Type', 'application/json')\n    req.headers.set('Accept', 'application/json')\n    if (isNotEmpty(req.body) && isJson(req.body)) req.body = JSON.stringify(req.body)\n    return req\n  },\n  id: 'TINY_FETCH_JSON_REQUEST',\n}\n\nexport default jsonRequest\n", "const jsonResponse = {\n  async response(response) {\n    if (response.bodyUsed) return response\n    try {\n      const text = await response.text()\n    const resp = { ...response, ...JSON.parse(text) }\n    return resp\n    } catch (error) {\n      return response\n    }\n  },\n  id: 'TINY_FETCH_JSON_RESPONSE',\n}\n\nexport default jsonResponse\n", "import { isJson } from '../utils'\n\nconst rejectErrors = {\n  response(response) {\n    if (isJson(response)) return response\n    if (!response.ok) throw response\n    return response\n  },\n  id: 'TINY_FETCH_REJECT_ERRORS',\n}\n\nexport default rejectErrors\n", "const cache = new Map()\n\nconst ttl = 1000 * 60 * 10 // 10 minutes\n\nconst jsonRequest = { id: 'TINY_FETCH_LRUCACHE' }\n\njsonRequest.mapKey = null\n\njsonRequest.request = (request) => {\n  if (request.cache) {\n    const { headers, url } = request\n    const headerValues = [...headers.values()]\n    const headerString = headerValues.join('')\n    jsonRequest.mapKey = JSON.stringify({\n      url,\n      method: request.method,\n      headerString,\n    })\n  }\n  return request\n}\n\njsonRequest.response = (response) => {\n  if (jsonRequest.mapKey) {\n    if (cache.has(jsonRequest.mapKey)) return cache.get(jsonRequest.mapKey)\n    cache.set(jsonRequest.mapKey, response.clone())\n    setTimeout(() => {\n      cache.delete(jsonRequest.mapKey)\n    }, ttl)\n  }\n  return response\n}\n\nexport default jsonRequest\n", "import TinyFetch from './TinyFetch'\nimport { jsonRequest, jsonResponse, rejectErrors, lrucache } from './interceptors'\n\nexport default function useTinyFetch(config = {}) {\n  const client = new TinyFetch(jsonRequest, jsonResponse, rejectErrors, lrucache)\n  return client.request(config)\n}\n\n\n"],
  "mappings": "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",
  "names": ["isJson", "str", "isEmpty", "value", "empty", "isNotEmpty", "toRequest", "request", "overloadMethod", "method", "url", "TinyFetch", "interceptors", "_fetch", "f", "req", "promise", "request", "requestError", "arg", "a", "response", "responseError", "_interceptor", "pos", "existing", "i", "toRequest", "isJson", "r", "overloadMethod", "interceptorId", "val", "TinyFetch_default", "jsonRequest", "req", "isNotEmpty", "isJson", "json_request_default", "jsonResponse", "response", "text", "json_response_default", "rejectErrors", "response", "isJson", "reject_errors_default", "cache", "ttl", "jsonRequest", "request", "headers", "url", "headerString", "response", "lrucache_default", "useTinyFetch", "config", "TinyFetch_default", "json_request_default", "json_response_default", "reject_errors_default", "lrucache_default"]
}
